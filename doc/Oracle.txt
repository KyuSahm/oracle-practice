0. SYS 계정
암호: ehalthf93

1. DBF file position
1) CDB (Container DB)
C:\app\gusam\product\18.0.0\oradata\XE
2) PDB (Pluggable DB)
C:\app\gusam\product\18.0.0\oradata\XE\XEPDB1

2. Add Table Space
- NEWLEC_TABLESPACE
- NEWLEC_LOGSPACE

3. Add User Account(big/littel character)
- NEWLEC/ehalthf93

4. SQL
1) DDL (Data Definition Language)
 - CREATE, ALTER, DROP
2) DML (Data manipulation Language)
 - SELECT, UPDATE, INSERT, DELETE
3) DCL (Data Control Language)
 - Grant, Revoke

5. Create Table - DDL
CREATE TABLE MEMBER
(
    ID         VARCHAR2(50),
    PWD        NVARCHAR2(50),
    NAME       NVARCHAR2(50),
    GENDER     NCHAR(2),       -- 남성 or 여성
    AGE        NUMBER(3),
    BIRTHDAY   CHAR(10),       -- 2000-01-02
    PHONE      CHAR(13),       -- 010-1234-5678
    REGDATE    DATE
);

DROP TABLE MEMBER;

6. DATATYPE
1) CHAR(SIZE (BYTE|CHAR))    --> CHAR option means the number of characters
2) VARCHAR2(SIZE (BYTE|CHAR))  --> CHAR option means the number of characters
3) NCHAR(SIZE) --> SIZE means the number of characters
4) NVARCHAR2(SIZE) --> SIZE means the number of characters
-- MAX SIZE
-- 4000 bytes or characters if MAX_STRING_SIZE = STANDARD
-- 32767 bytes or characters if MAX_STRING_SIZE = EXTENDED

SELECT LENGTH('ab') from DUAL;  --> 2
SELECT LENGTHB('ab') from DUAL;  --> 2 bytes
SELECT LENGTH('한글') from DUAL;  --> 2
SELECT LENGTHB('한글') from DUAL;  --> 6 bytes

SELECT * FROM NLS_DATABASE_PARAMETERS;
-- NLS_NCHAR_CHARACTERSET/AL16UTF16 --> NCHAR, NVARCHAR
-- NLS_CHARACTERSET/AL32UTF8 --> CHAR option for CHAR, VARCHAR2

INSERT INTO MEMBER(GENDER) VALUES('남성');
5) LONG --> variable-length character strings containing up to 2 gigabytes -1 --> 테이블 당 한개만 사용가능. 요즘 잘 안씀.
6) CLOB --> 대용량 텍스트 데이터 타입(최대 4Gbyte)
7) NCLOB --> 대용량 텍스트 유니코드 데이터 타입(최대 4Gbyte)
8) NUMBER --> requires from 1 to 22 bytes
- NUMBER(4) --> NUMBER(4, 0) 최대 4자로 이루어진 정수
- NUMBER(6, 2) 소숫점 2자리를 포함하는 최대 6자리의 숫자
- NUMBER(6, -2) 소숫점 -2자리에서 반올림하는 최대 6자리의 숫자
- NUMBER --> NUMBER(38, *)
- NUMBER(*,5) --> NUMBER(38, 5)

9) DATE --> 년월일까지 표시 (BC 4712를 기준으로 milisecond로 계산한 후, 날짜로 표시)
10) TIMESTAMP --> 년월일 시분초 (BC 4712를 기준으로 milisecond로 계산한 후, 시분초 표시) --> NLS_TIMESTAMP_FORMAT 파라미터에 명시된 값을 따름
     TIMESTAMP WITH TIME ZONE --> NLS_TIMESTAMP_TZ_FORMAT 파라미터에 명시된 값을 따름
     TIMESTAMP WITH LOCAL TIME ZONE --> NLS_TIMESTAMP_FORMAT 파라미터에 명시된 값을 따름
     SELECT * FROM NLS_DATABASE_PARAMETERS; -- 관련 파라메터 확인

7. Alter Table - DDL
CREATE TABLE MEMBER
(
    ID         VARCHAR2(50),   --> NVARCHAR2(50)
    PWD        NVARCHAR2(50),
    NAME       NVARCHAR2(50),
    GENDER     NCHAR(2),
    AGE        NUMBER(3),      --> delete because Birthday can induce age  
    BIRTHDAY   CHAR(10),
    PHONE      CHAR(13),
    REGDATE    DATE
);

ALTER TABLE MEMBER MODIFY ID NVARCHAR2(50);
ALTER TABLE MEMBER DROP COLUMN AGE;
ALTER TABLE MEMBER ADD EMAIL VARCHAR2(200);

8. Prepare tables for practicing SQL Query
CREATE TABLE NOTICE
( 
  ID NUMBER NOT NULL,
  TITLE NVARCHAR2(100) NOT NULL,
  WRITER_ID NVARCHAR2(50) NOT NULL,
  CONTENT CLOB,
  REGDATE TIMESTAMP (6) DEFAULT systimestamp NOT NULL,
  HIT NUMBER DEFAULT 0 NOT NULL,
  FILES NVARCHAR2(1000),
  PUB NUMBER(1,0) DEFAULT 0 NOT NULL,
  CONSTRAINT "NOTICE_PK" PRIMARY KEY ("ID")
)

CREATE VIEW NOTICE_VIEW
AS SELECT ROWNUM NUM, A.* 
     FROM NOTICE A
    ORDER BY REGDATE DESC;

CREATE TABLE "COMMENT" -- COMMENT is reserved keyword
(
    ID         NUMBER,
    CONTENT    NVARCHAR2(2000),
    REGDATE    TIMESTAMP,
    WRITER_ID  NVARCHAR2(50),
    NOTICE_ID  NUMBER
);

CREATE TABLE ROLE
(
    ID          VARCHAR2(50),
    DESCRIPTION NVARCHAR2(500)
);

CREATE TABLE MEMBER_ROLE
(
    MEMBER_ID   NVARCHAR2(50),
    ROLE_ID     VARCHAR2(50)
);

9. 데이터 조작하기
1) DDL (CREATE/ALTER/DROP)
2) DML (INSERT/SELECT/UPDATE/DELETE) - CRUD
- INSERT문 : INSERT INTO <테이블> VALUES(<값목록>)
EX) 모든 필드 입력하기 - 
     INSERT INTO MEMBER VALUES('newlec', '111', '홍길동', '남성', '1995-02-09', '010-4697-1234', '2014-05-23', 'newlec@newlecture.com');
     원하는 필드만 입력하기 - 선택되지 않은 칼럼들은 NULL값으로 입력됨.
     INSERT INTO MEMBER(ID, PWD) VALUES('newlec', '111');
     INSERT INTO MEMBER(PWD, ID) VALUES('111', 'newlec');

- UPDATE문:
EX) 
UPDATE MEMBER SET PWD='222' WHERE ID='newlec';
UPDATE MEMBER SET NAME='김규삼', GENDER='남성', BIRTHDAY='1975-10-17' WHERE ID='gusami';

- DELETE문:
EX)
DELETE FROM MEMBER WHERE ID='test';

- SELECT문 : 기본적으로 칼럼명의 대소문자를 구분하지 않는다.
EX)
모든 필드 조회 -
     SELECT *
      FROM MEMBER;
특정 필드 조회 -
     SELECT ID, NAME, PWD
      FROM MEMBER;
칼럼 이름 변경해서 조회 -
     SELECT ID as user_id, NAME, PWD
      FROM MEMBER;
     SELECT ID user_id, NAME, PWD
      FROM MEMBER; 
     SELECT ID "user id", NAME, PWD  -- 공백이 존재할 경우, ""으로 감싸면 대소문자를 구분
      FROM MEMBER;
     
3) DCL (GRAND/REVOKE)

10. Oracle Execution Plan 보기
EXPLAIN PLAN
  SET STATEMENT_ID = 'NOTICE_VIEW_ST' FOR
SELECT * 
  FROM NOTICE_VIEW
where num >=10;

SELECT cardinality "Rows",
   lpad(' ',level-1)||operation||' '||options||' '||object_name "Plan"
  FROM PLAN_TABLE
CONNECT BY prior id = parent_id
        AND prior statement_id = statement_id
  START WITH id = 0
        AND statement_id = 'NOTICE_VIEW_ST'
  ORDER BY id;

11. 트랜잭션 처리
: 업무 실행단위/논리 명령 단위
- commit
- rollback

12. 산술 연산자
- +, -, *, / : 숫자데이터만 가능한 연산
예)
SELECT 1+'3' FROM DUAL;   -- 4 출력, '3'을 숫자 3으로 변환 후, 연산
SELECT 1+'a' FROM DUAL;   -- ORA-01722: 수치가 부적합합니다

- || : 문자열 합치기 연산
SELECT NAME || '(' || ID || ')' NAMEID FROM MEMBER; -- 김규삼(gusami) 출력.
SELECT '3'||10 FROM DUAL;  -- 310 출력, 10을 문자 '10'으로 변환 후, 문자열 합침.

13. 비교 연산자
=: 같은지 검사
!=, ^=, <>: 다른지 검사
>, <, >=, <=: 크기 비교
IS NULL: NULL인지 검사
IS NOT NULL: NOT NULL 검사
예)
SELECT * 
  FROM NOTICE
 WHERE WRITER_ID = 'newlec';

SELECT * 
  FROM NOTICE
 WHERE hit > 3;

UPDATE NOTICE SET CONTENT=NULL WHERE WRITER_ID='gusami';

SELECT *
 FROM NOTICE
WHERE CONTENT IS NULL;

SELECT *
 FROM NOTICE
WHERE CONTENT IS NOT NULL;

14. 관계연산자
1) NOT
2) AND
3) OR
4) BETWEEN
5) IN
예1) 조회수가 0, 1, 2인 게시글을 조회하시오. 연속적인 값인 경우. (4가지 방법)
SELECT * FROM NOTICE WHERE HIT = 0 OR HIT = 1 OR HIT = 2;
SELECT * FROM NOTICE WHERE HIT IN (0, 1, 2);
SELECT * FROM NOTICE WHERE HIT >= 0 AND HIT <= 2;
SELECT * FROM NOTICE WHERE HIT BETWEEN 0 AND 2; -- 제일 좋음

예2) 조회수가 0, 2, 7인 게시글을 조회하시오. 비연속적인 값인 경우. (2가지 방법)
SELECT * FROM NOTICE WHERE HIT = 0 OR HIT = 2 OR HIT = 7;
SELECT * FROM NOTICE WHERE HIT IN (0, 2, 7);

예3) 조회수가 0, 2, 7이 아닌 게시글을 조회하시오. (2가지 방법)
SELECT * FROM NOTICE WHERE HIT != 0 AND HIT != 2 AND HIT != 7;
SELECT * FROM NOTICE WHERE HIT NOT IN (0, 2, 7);

15. 패턴 비교 연산자
1) LIKE, %, _
2) % - 여러 글자들을 의미
3) _ - 한글자를 의미
예1) 회원 중에서 '박'씨 성을 조회하시오.
SELECT * FROM MEMBER WHERE NAME = '박%';      -- 동작안함. 이름이 '박%'인 사람을 찾음.
SELECT * FROM MEMBER WHERE NAME LIKE '박%';

예2) 회원 중에서 '박'씨 성을 가지고, 이름이 두글자인 사람들을 조회하시오.
SELECT * FROM MEMBER WHERE NAME LIKE '박_';

예3) 회원 중에서 '박'씨 성을 제외한 회원을 조회하시오.
SELECT * FROM MEMBER WHERE NAME NOT LIKE '박%';

예4) 회원 중에서 이름에 '도'자가 들어간 회원을 조회하시오.
SELECT * FROM MEMBER WHERE NAME LIKE '%도%';

16. 정규식을 이용한 패턴 연산
1) 정규식의 개념
- 조건을 만족하는 TEXT를 찾을 때 사용하는 문법
- https://regexlib.com/CheatSheet.aspx?AspxAutoDetectCookieSupport=1
  : search button을 누르면, 사용자들이 만들어 놓은 정규표현식을 찾아볼 수 있음.
2) 기본 문법
^ 	Start of a string.
예) ^abc => abc, abcdefg, abc123, ...
$	End of a string.
예) abc$ => abc, endsinabc, 123abc, ...
.	Any character (except \n newline)
예) a.c => abc, aac, acc, adc, aec, ...
|	Alternation.
예) bill|ted => ted, bill 
{...}	Explicit quantifier notation.
예) ab{2}c => abbc
[...]	Explicit set of characters to match.
예) a[bB]c => abc, aBc
(...)	Logical grouping of part of an expression.
예) (abc){2} => abcabc
*	0 or more of previous expression.
예) ab*c => ac, abc, abbc, abbbc, ...
+	1 or more of previous expression.
예) ab+c => abc, abbc, abbbc, ...
?	0 or 1 of previous expression; also forces minimal matching when an expression might match several strings within a search string.
예) ab?c => ac, abc
\	Preceding one of the above, it makes it a literal instead of a special character. Preceding a special matching character, see below.
예) a\sc => a c

3) Character Escapes - http://tinyurl.com/5wm3wl
Escaped Char	Description
ordinary characters	Characters other than . $ ^ { [ ( | ) ] } * + ? \ match themselves.
\a		Matches a bell (alarm) \u0007.
\b		Matches a backspace \u0008 if in a []; otherwise matches a word boundary (between \w and \W characters).
\t		Matches a tab \u0009.
\r		Matches a carriage return \u000D.
\v		Matches a vertical tab \u000B.
\f		Matches a form feed \u000C.
\n		Matches a new line \u000A.
\e		Matches an escape \u001B.
\040		Matches an ASCII character as octal (up to three digits); numbers with no leading zero are backreferences if they have only one digit or if they correspond to a capturing group number. (For more information, see Backreferences.) For example, the character \040 represents a space.
\x20		Matches an ASCII character using hexadecimal representation (exactly two digits).
\cC		Matches an ASCII control character; for example \cC is control-C.
\u0020		Matches a Unicode character using a hexadecimal representation (exactly four digits).
\*		When followed by a character that is not recognized as an escaped character, matches that character. For example, \* is the same as \x2A.
4) Character Classes - http://tinyurl.com/5ck4ll
Char Class	Description
.		Matches any character except \n. If modified by the Singleline option, a period character matches any character. For more information, see Regular Expression Options.
[aeiou]		Matches any single character included in the specified set of characters.
[^aeiou]		Matches any single character not in the specified set of characters.
[0-9a-fA-F]	Use of a hyphen (?) allows specification of contiguous character ranges. (중요)
\p{name}	Matches any character in the named character class specified by {name}. Supported names are Unicode groups and block ranges. For example, Ll, Nd, Z, IsGreek, IsBoxDrawing.
\P{name}	Matches text not included in groups and block ranges specified in {name}.
\w		Matches any word character. Equivalent to the Unicode character categories [\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}].
                         If ECMAScript-compliant behavior is specified with the ECMAScript option, \w is equivalent to [a-zA-Z_0-9]. (중요: 알파벳과 숫자 표현,  [a-zA-Z_0-9]과 동일)
\W		Matches any nonword character. Equivalent to the Unicode categories [^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}]. If ECMAScript-compliant behavior is specified with the ECMAScript option, \W is equivalent to [^a-zA-Z_0-9].
\s		Matches any white-space character. Equivalent to the Unicode character categories [\f\n\r\t\v\x85\p{Z}]. If ECMAScript-compliant behavior is specified with the ECMAScript option, \s is equivalent to [ \f\n\r\t\v].
\S		Matches any non-white-space character. Equivalent to the Unicode character categories [^\f\n\r\t\v\x85\p{Z}]. If ECMAScript-compliant behavior is specified with the ECMAScript option, \S is equivalent to [^ \f\n\r\t\v].
\d		Matches any decimal digit. Equivalent to \p{Nd} for Unicode and [0-9] for non-Unicode, ECMAScript behavior. (중요: 숫자표현과 동일, [0-9])
\D		Matches any nondigit. Equivalent to \P{Nd} for Unicode and [^0-9] for non-Unicode, ECMAScript behavior. (중요: 숫자를 제외한 문자와 동일, [^0-9])

4) 전화번호를 표현하는 정규 표현식
^01[016-9]-\d{3,4}-\d{4}$
^01[016-9]-[0-9]{3,4}-[0-9]{4}$
=> "https://regexlib.com"의 "Regex Tester" 메뉴에서 테스트를 해볼 수 있음.

01[01679]-\d{3,4}-\d{4}
=> 시작(^)과 끝($)에 대한 형식을 지정하지 않으면, 해당 형식을 포함만 해도 됨.

5) ORACL에 적용
- 전화번호 패턴을 타이틀에서 사용
- 문법: WHERE REGEXP_LIKE(Column Name, '정규표현식')
예) 전화번호가 타이틀에 있는 경우를 찾음.
 SELECT * 
  FROM NOTICE
 WHERE REGEXP_LIKE(TITLE, '01[016-9]-\d{3,4}-\d{4}');
=> 찾은 데이터: "전화번호로 연락주시기 바랍니다. 010-1111-2222"

6) 이메일을 위한 정규표현식
- 숫자로 시작하지 않지만, 숫자 포함 문자열@숫자로 시작하지 않지만, 숫자 포함 문자열.(org|net|com)
^\D\w*@\D\w*\.(org|net|com)$

17. ROWNUM 그리고 행 제한하기
1) ROWNUM은 WHERE 적용 한 후, 그리고, ORDER BY 적용 전에 결과 집합에 대해서 순서를 매김.
예) SELECT * FROM NOTICE; -- 전부 조회
    SELECT * FROM NOTICE WHERE ROWNUM BETWEEN 1 AND 5;   -- 5개의 데이터만 조회
    SELECT * FROM NOTICE WHERE ROWNUM BETWEEN 6 AND 10;  -- 결과가 안 나옴. 시작이 2이상이면 나오지 않음. 
=> 해결책(서브쿼리의 사용)
    SELECT * 
      FROM (SELECT ROWNUM SEQ, A.*
              FROM NOTICE A ) B
     WHERE B.SEQ > 8;

=> ORDER BY 포함 예제   
    SELECT ROWNUM ROWSEQ, A.* 
      FROM NOTICE A
      ORDER BY A.REGDATE DESC
    결과)  
    ROWSEQ TITLE
    13	test 13
    12	test 12
    11	test 11
    10	test 10
    9	  test 9
    8	  test 8
    7	  test 7
    6	  test 6
    5	  test 5
    4	  test 4
    3	  test 3
    2	  test 2
    1	  전화번호로 연락주시기 바랍니다. 010-1111-2222

=>  SELECT * 
      FROM (SELECT ROWNUM ROWSEQ, A.*
              FROM (SELECT * 
                      FROM NOTICE
                    ORDER BY REGDATE DESC) A )
      WHERE ROWSEQ BETWEEN 6 and 10;
2) ROW_NUMBER를 사용하는 방법
    SELECT *
      FROM (SELECT ROW_NUMBER() OVER (ORDER BY REGDATE DESC) ROWSEQ, A.*
              FROM NOTICE A)  
    WHERE ROWSEQ BETWEEN 6 and 10;

18. DISTINCT: 중복된 값 제거
1) 중복된 나이 제거 - 하나의 칼럼에서 쓰는게 일반적.
SELECT DISTINCT AGE FROM MEMBER;

2) 여러 개의 칼럼에 사용 시, 여러 개의 칼럼들에 대한 교집합의 유일값을 출력
SELECT DISTINCT GENDER, AGE FROM MEMBER;

19. 중간 요약과 함수 단원 안내
1) "Intermediate Summary.png" 파일 참조

20. 함수
1) 문자열 함수
2) 숫자 함수
3) 날짜 함수
4) 변환 함수
5) NULL 관련 함수
6) 집계 함수

21. 문자열 내장 함수
1) CHR, CONCAT, INITCAP, LOWER, LPAD, LTRIM, NLS_INITCAP, NLS_LOWER, NLSSORT, NLS_UPPER, REGEXP_REPLACE, REGEXP_SUBSTR, REPLACE, RPAD, RTRIM,
   SOUNDEX, SUBSTR, TRANSLATE, TREAT, TRIM, NLS_UPPER

2) 문자열 추출함수 : SUBSTR(문자열, 시작위치, 길이)   
SELECT SUBSTR('HELLO', 1, 3) FROM DUAL; -- 1번째부터 3개를 짜름. 'HEL' 
SELECT SUBSTR('HELLO', 3) FROM DUAL;    -- 3번째부터 끝까지. 'LLO'
SELECT SUBSTRB('HELLO', 3) FROM DUAL;   -- 3번째 바이트부터 끝까지. 'LLO'

예) 이름 출력
SELECT SUBSTR(NAME, 2, 2) FROM MEMBER; -- 성을 빼고 이름만 출력
SELECT SUBSTRB(NAME, 3) FROM MEMBER;   -- NVARCHAR은 UTF16을 사용하므로, 성을 빼고 이름만 출력

예) 모든 학생의 이름과 출생 월만을 조회하시오.
SELECT NAME, SUBSTR(BIRTHDAY, 6, 2) FROM MEMBER;

예) 회원 중에서 전화번호가 011로 시작하는 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE SUBSTR(PHONE, 1, 3) = '011'; -- WHERE절에 함수 호출이 들어가면, 테이블에 존재하는 개수를 Full Access하면서 함수를 적용. 아쉬운 방법.
SELECT * FROM MEMBER WHERE PHONE LIKE '011%'; -- PHONE에 대해 인덱스가 존재한다면, 빠른 결과를 얻을 수 있다. 바람직한 방법.

예) 회원 중에서 생년 월이 7, 8, 9월인 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE SUBSTR(BIRTHDAY, 6, 2) IN ('07', '08', '09');
SELECT * FROM MEMBER WHERE SUBSTR(BIRTHDAY, 6, 2) >= '07' and SUBSTR(BIRTHDAY, 6, 2) <= '09';
SELECT * FROM MEMBER WHERE SUBSTR(BIRTHDAY, 6, 2) = '07' or SUBSTR(BIRTHDAY, 6, 2) = '08' or SUBSTR(BIRTHDAY, 6, 2) = '09';

예) 회원 중에서 생년 월이 7, 8, 9월이 아닌 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE SUBSTR(BIRTHDAY, 6, 2) NOT IN ('07', '08', '09');

예) 전화 번호를 등록하지 않은 회원 중에서 생년 월이 7, 8, 9월인 회원의 모든 정보를 출력하시오.
SELECT * FROM MEMBER WHERE PHONE IS NULL AND SUBSTR(BIRTHDAY, 6, 2) IN ('07', '08', '09');

3) 문자열 덧셈함수 : CONCAT(문자열, 문자열)
SELECT CONCAT('홍', '길동') FROM DUAL;   -- 함수 사용.
SELECT '홍'||'길동' FROM DUAL;   -- 연산자 사용. 연산자가 함수보다 성능이 좋다.

4) 문자열 트림함수 : 공백 제거
SELECT LTRIM(' HELLO    ') FROM DUAL;   -- 왼쪽 공백 제거
SELECT RTRIM(' HELLO    ') FROM DUAL;   -- 오른쪽 공백 제거
SELECT TRIM(' HELLO    ') FROM DUAL;    -- 양쪽 공백 제거

5) 문자열 소문자 또는 대문자로 변경하기
SELECT LOWER('NeWlEC') FROM DUAL;       -- 소문자로 변경
SELECT UPPER('NeWlEC') FROM DUAL;       -- 대문자로 변경

예) 회원의 아이디가 'newlec'인 회원을 조회하시오. (조건:대소문자를 가리지 않음)
SELECT * FROM MEMBER WHERE UPPER(ID) = 'NEWLEC';

6) 문자열 대치 함수: REPLACE(문자열, 찾는 문자열, 대치할 문자열) / TRANSLATE()
SELECT REPLACE('WHERE WE ARE', 'WE', 'YOU') FROM DUAL; -- "WHERE YOU ARE"를 출력
SELECT TRANSLATE('WHERE WE ARE', 'WE', 'YO') FROM DUAL; -- 'W'는 'Y'로 변경, 'E'는 'O'로 변경

예) 회원의 이름과 주소를 조회하시오.(단, 주소는 빈칸 없이 출력하시오)
SELECT NAME, REPLACE(ADDRESS, ' ', '') FROM MEMBER;

7) 문자열 패딩 함수
SELECT LPAD('HELLO', 5) FROM DUAL;       -- "HELLO" 출력
SELECT LPAD('HELLO', 5, '0') FROM DUAL;  -- "HELLO" 출력
SELECT LPAD('HELLO', 10, '0') FROM DUAL; -- "00000HELLO" 출력
SELECT RPAD('HELLO', 10, '0') FROM DUAL; -- "HELLO00000" 출력
예) 회원의 이름을 조회하시오.(단, 이름의 길이가 3자가 안 되는 경우는 이름 오른쪽을 밑줄('_')로 채우시오.)
SELECT RPAD(NAME, 5, '_')   -- 한글은 한글자가 2byte를 차지
  FROM MEMBER;

8) 모든 단어의 첫 글자를  대문자로 바꾸는 함수: INITCAP(문자열)
SELECT INITCAP('the') FROM DUAL; -- 'The' 출력
SELECT INITCAP('the most important thing is ....') FROM DUAL; -- 'The Most Important Thing Is ....' 출력
SELECT INITCAP('the most im하이portant t오케이hing is ....') FROM DUAL; -- The Most Im하이Portant T오케이Hing Is ....

9) 문자열 검색 함수: INSTR(문자열, 검색문자열, 시작위치, 찾는 순번)
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TO') FROM DUAL; -- 13 출력
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TOO') FROM DUAL; -- 0 출력
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TO', 15) FROM DUAL; -- 24 출력. 15위치부터 'TO'를 찾아라.
SELECT INSTR('ALL WE NEED TO IS JUST TO...', 'TO', 1, 2) FROM DUAL; -- 24 출력. 1부터 'TO'를 찾아라. 근데 2번째 것을 찾아라.
예) 회원의 전화번호에서 두번째 대시(-)문자가 존재하는 위치를 출력하시오.
SELECT INSTR(PHONE, '-', 1, 2) FROM MEMBER; -- 9출력, 전화번호가 없으면, null 출력
예) 회원의 전화번호에서 첫번째 대시(-)문자와 두번째 대시(-)문자 사이의 간격은?
SELECT INSTR(PHONE, '-', 1, 2) - INSTR(PHONE, '-', 1, 1) - 1 FROM MEMBER; -- 4출력
예) 회원의 전화번호에서 첫번째와 두번째 사이의 국번을 출력하시오.
SELECT SUBSTR(PHONE, INSTR(PHONE, '-', 1, 1) + 1, INSTR(PHONE, '-', 1, 2) - INSTR(PHONE, '-', 1, 1) - 1)
  FROM MEMBER;
10) 문자열 길이를 얻는 함수
SELECT LENGTH('WHERE WE ARE') FROM DUAL;
예) 모든 회원의 핸드폰 번호와 번호의 문자열 길이를 조회하시오.
SELECT PHONE, LENGTH(PHONE) FROM MEMBER;
예) 모든 회원의 핸드폰 번호와 그 번호에 포함된 문자 '-'를 없앤 전화번호의 길이를 조회하시오.  
SELECT PHONE, LENGTH(REPLACE(PHONE, '-', '')) FROM MEMBER;

11) 코드 값을 반환하는 함수
SELECT ASCII('A') FROM DUAL;  -- 65 출력

12) 코드 값으로 문자를 반환하는 함수
SELECT CHR(65) FROM DUAL;  -- 'A' 출력

22. 숫자 함수
1) 절대값을 구하는 함수: ABS(n)
SELECT ABS(35), ABS(-35) FROM DUAL; -- 35, 35 출력

2) 음수/양수를 알려주는 함수: SIGN(n)
SELECT SIGN(35), SIGN(-35), SIGN(0) FROM DUAL; -- 1, -1, 0 출력

3) 숫자의 반올림 값을 알려주는 함수: ROUND(n, i)
SELECT ROUND(34.456789), ROUND(34.56789) FROM DUAL; -- 34, 35 출력
SELECT ROUND(12.3456789, 2), ROUND(12.3456789, 3) FROM DUAL; -- 12.35, 12.346 출력

4) 숫자의 나머지 값을 반환하는 함수: MOD(n1, n2)
SELECT TRUNC(17/5) 몫, MOD(17,5) 나머지 FROM DUAL;   -- 3, 2 출력

5) 숫자의 제곱을 구하는 함수와 제곱근을 구하는 함수: POWER(n1, n2), SQRT(n)
SELECT POWER(5,3), SQRT(25) FROM DUAL;  -- 125, 5 출력

23. 날짜 함수
1) 현재 시간을 얻는 함수: 별도의 인자가 필요없어서 괄호가 필요없음
- SYSDATE: "년월일시분초" 까지 출력
- SYSTIMESTAMP: "년월일시분초밀리초" 까지 출력
- CURRENT_DATE: 세션의 현재 날짜. 세션 타임존에 의해 변경됨.
- CURRENT_TIMESTAMP: 세션의 현재 타임스탬프. 세션 타임존에 의해 변경됨.
- 출력
SELECT SYSDATE, CURRENT_DATE, SYSTIMESTAMP, CURRENT_TIMESTAMP FROM DUAL;
-- 21/09/19	21/09/19	21/09/19 22:41:32.634000000 +09:00	21/09/19 22:41:32.634000000 ASIA/SEOUL 출력
- 현재 세션의 타임존 변경
ALTER SESSION SET TIME_ZONE = '-01:00'; -- 한국은 '09:00'임
- 타임존 변경 후, 출력
SELECT SYSDATE, CURRENT_DATE, SYSTIMESTAMP, CURRENT_TIMESTAMP FROM DUAL;
-- 21/09/19	21/09/19	21/09/19 22:49:37.922000000 +09:00	21/09/19 12:49:37.922000000 -01:00
- 현재 세션의 포맷 변경
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
- 세션의 포맷 변경 후, 출력
SELECT SYSDATE, CURRENT_DATE, SYSTIMESTAMP, CURRENT_TIMESTAMP FROM DUAL;
-- 2021-09-19 22:56:12	2021-09-19 12:56:12	21/09/19 22:56:12.078000000 +09:00	21/09/19 12:56:12.078000000 -01:00

2) 날짜 추출 함수: EXTRACT(YEAR/MONTH/DAY/HOUR/MINUTE/SECOND FROM ...)
SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(MONTH FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(DAY FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(HOUR FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(MINUTE FROM SYSDATE) FROM DUAL;
SELECT EXTRACT(SECOND FROM SYSDATE) FROM DUAL; -- 초만 출력
예) 가입 회원 중에 비수기(2, 3, 5, 11, 12)월 달에 가입한 회원을 조회하시오.
SELECT * FROM MEMBER WHERE EXTRACT(MONTH FROM REGDATE) in (2, 3, 5, 11, 12);

3) 날짜를 누적하는 함수: ADD_MONTH(날짜, 정수)
SELECT ADD_MONTHS(SYSDATE, 1) FROM DUAL;
SELECT ADD_MONTHS(SYSDATE, -1) FROM DUAL;
예) 가입 회원 중에 가입한지 6개월이 안 되는 회원을 조회하시오.
SELECT * FROM MEMBER WHERE ADD_MONTHS(SYSDATE, -6) < REGDATE;

4) 날짜의 개월 차이를 알아내는 함수: MONTHS_BETWEEN(날짜, 날짜)
SELECT MONTHS_BETWEEN(SYSDATE, TO_DATE('2013-12-25')) FROM DUAL;
예) 가입 회원 중에 가입한지 6개월이 안 되는 회원을 조회하시오.
SELECT * FROM MEMBER WHERE MONTHS_BETWEEN(SYSDATE, REGDATE) < 6;

5) 다음 요일을 알려주는 함수: NEXT_DAY(현재날짜, 다음요일)
SELECT SYSDATE, NEXT_DAY(SYSDATE, '토요일') FROM DUAL; -- 2021-09-19 23:17:27, 2021-09-25 23:17:27 현재날짜 기준으로 가장 빠른 토요일의 날짜를 출력
SELECT SYSDATE, NEXT_DAY(SYSDATE, '토') FROM DUAL;
SELECT SYSDATE, NEXT_DAY(SYSDATE, 7) FROM DUAL; -- 1: 일, 2: 월, 3: 화, 4: 수, 5: 목, 6: 금, 7: 토

6) 월의 마지막 일자를 알려주는 함수: LAST_DAY(날짜)
SELECT LAST_DAY(SYSDATE) FROM DUAL;
SELECT LAST_DAY(ADD_MONTHS(SYSDATE, 1)) FROM DUAL; -- 다음 달의 마지막 날짜

7) 지정된 범위에서 날짜를 반올림하는/자르는 함수: ROUND/TRUNC(날짜, 포맷)
SELECT ROUND(SYSDATE, 'CC'), TRUNC(SYSDATE, 'CC') FROM DUAL;     -- 'CC' means century(100년)
SELECT SYSDATE, ROUND(SYSDATE, 'YEAR'), TRUNC(SYSDATE, 'YEAR') FROM DUAL; -- 2021-09-19 23:32:31, 2022-01-01 00:00:00, 2021-01-01 00:00:00
SELECT ROUND(SYSDATE, 'Q'), TRUNC(SYSDATE, 'Q') FROM DUAL;       -- 'Q' means Quarter
SELECT ROUND(SYSDATE, 'MONTH'), TRUNC(SYSDATE, 'MONTH') FROM DUAL;
SELECT ROUND(SYSDATE, 'W'), TRUNC(SYSDATE, 'W') FROM DUAL;       -- 'W' means Week
SELECT ROUND(SYSDATE, 'DAY'), TRUNC(SYSDATE, 'DAY') FROM DUAL;
SELECT ROUND(SYSDATE, 'D'), TRUNC(SYSDATE, 'D') FROM DUAL;
SELECT ROUND(SYSDATE, 'HH'), TRUNC(SYSDATE, 'HH') FROM DUAL;
SELECT ROUND(SYSDATE, 'MI'), TRUNC(SYSDATE, 'MI') FROM DUAL;